
float worley_noise(float3 p)
{
	float3 base = floor(p);
	float3 offset = frac(p);

	float value = 1.0;
	for (int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			for (int t = -1; t <= 1; t++)
			{
				float3 shift = float3(x, y, t);
				float3 pos = hash33(base + shift);
				float3 delta = shift + pos - offset;
				value = min(value, length(delta));
			}

		}

	}
	return value;
}

float worley_1d(float2 uv, int i, float2 scale)
{
	float theta = float(i) * sub_rotation;
	uv = transform(uv, float2(0.5, 0.5), theta);
	float2 displacement = float(i) * sub_displace;
	float2 coord = uv * uv_size;
	coord += displacement;
	coord *= 1.0 / (2.0 * pixel_size * scale);
	return worley_noise(float3(coord, time));
}