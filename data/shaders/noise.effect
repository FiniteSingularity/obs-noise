uniform float4x4 ViewProj;
uniform float2 uv_size;
uniform float global_rotation;
uniform float2 global_offset;
uniform float2 pixel_size;
uniform float2 sub_scaling;
uniform float2 sub_displace;
uniform float sum_influence;
uniform float time;
uniform float sub_influence;
uniform float std_scale;
uniform int layers;
uniform int noise_type;
uniform float4 color_1;
uniform float4 color_2;

uniform float sub_rotation;
uniform float contrast;
uniform float brightness;

uniform bool billow;
uniform bool ridged;
uniform bool contours;
uniform float num_contours;
uniform float power;

uniform int dw_iterations;
uniform float2 dw_strength;

#include "noise_functions.effect"

VertData mainTransform(VertData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 mainImage3(VertData v_in) : TARGET
{
	float2 uv = global_transform(v_in.uv, float2(0.5, 0.5), global_rotation);
	float3 value = fractal_noise(uv);
	float2 dw_shift = float2(9.5f, 10.2f);
	for (int i = 0; i < dw_iterations; i++)
	{
		value = fractal_noise(uv + dw_strength * 2.0f * (value.xy - 0.5f) / uv_size + dw_shift);
		dw_shift += 10.0f;
	}
	return adjustments(float4(value, 1.0), brightness, contrast);
}

float4 mainImageMax3(VertData v_in) : TARGET
{
	float2 uv = global_transform(v_in.uv, float2(0.5, 0.5), global_rotation);
	float3 value = fractal_noise_max(uv);
	float2 dw_shift = float2(9.5f, 10.2f);
	for (int i = 0; i < dw_iterations; i++)
	{
		value = fractal_noise_max(uv + dw_strength * 2.0f * (value.xy - 0.5f) / uv_size + dw_shift);
		dw_shift += 10.0f;
	}
	return adjustments(float4(value, 1.0), brightness, contrast);
}

float4 mainImage2(VertData v_in) : TARGET
{
	float2 uv = global_transform(v_in.uv, float2(0.5, 0.5), global_rotation);
	float3 value = fractal_noise(uv);
	float2 dw_shift = float2(9.5f, 10.2f);
	for (int i = 0; i < dw_iterations; i++)
	{
		value = fractal_noise(uv + dw_strength * 2.0f * (value.xy - 0.5f) / uv_size + dw_shift);
		dw_shift += 10.0f;
	}
	return adjustments(float4(value.xy, 0.0, 1.0), brightness, contrast);
}

float4 mainImageMax2(VertData v_in) : TARGET
{
	float2 uv = global_transform(v_in.uv, float2(0.5, 0.5), global_rotation);
	float3 value = fractal_noise_max(uv);
	float2 dw_shift = float2(9.5f, 10.2f);
	for (int i = 0; i < dw_iterations; i++)
	{
		value = fractal_noise_max(uv + dw_strength * 2.0f * (value.xy - 0.5f) / uv_size + dw_shift);
		dw_shift += 10.0f;
	}
	return adjustments(float4(value.xy, 0.0, 1.0), brightness, contrast);
}


float4 mainImage1(VertData v_in) : TARGET
{
	float2 uv = global_transform(v_in.uv, float2(0.5, 0.5), global_rotation);
	float3 value = fractal_noise(uv);
	float2 dw_shift = float2(9.5f, 10.2f);
	for (int i = 0; i < dw_iterations; i++)
	{
		value = fractal_noise(uv + dw_strength * 2.0f * (value.xy - 0.5f) / uv_size + dw_shift);
		dw_shift += 10.0f;
	}
	return adjustments(float4(value.x, value.x, value.x, 1.0), brightness, contrast);
}

float4 mainImageMax1(VertData v_in) : TARGET
{
	float2 uv = global_transform(v_in.uv, float2(0.5, 0.5), global_rotation);
	float3 value = fractal_noise_max(uv);
	float2 dw_shift = float2(9.5f, 10.2f);
	for (int i = 0; i < dw_iterations; i++)
	{
		value = fractal_noise_max(uv + dw_strength * 2.0f * (value.xy - 0.5f) / uv_size + dw_shift);
		dw_shift += 10.0f;
	}
	return adjustments(float4(value.x, value.x, value.x, 1.0), brightness, contrast);
}

float4 mainImageColorMap(VertData v_in) : TARGET
{
	float2 uv = global_transform(v_in.uv, float2(0.5, 0.5), global_rotation);
	float3 value = fractal_noise(uv);
	float2 dw_shift = float2(9.5f, 10.2f);
	for (int i = 0; i < dw_iterations; i++)
	{
		value = fractal_noise(uv + dw_strength * 2.0f * (value.xy - 0.5f) / uv_size + dw_shift);
		dw_shift += 10.0f;
	}
	float c = adjustments(float4(value.x, value.x, value.x, 1.0), brightness, contrast).x;

	return lerp(color_1, color_2, float4(c, c, c, c));
}


float4 mainImageColorMapMax(VertData v_in) : TARGET
{
	float2 uv = global_transform(v_in.uv, float2(0.5, 0.5), global_rotation);
	float3 value = fractal_noise_max(uv);
	float2 dw_shift = float2(9.5f, 10.2f);
	for (int i = 0; i < dw_iterations; i++)
	{
		value = fractal_noise_max(uv + dw_strength * 2.0f * (value.xy - 0.5f) / uv_size + dw_shift);
		dw_shift += 10.0f;
	}
	float c = adjustments(float4(value.x, value.x, value.x, 1.0), brightness, contrast).x;

	return lerp(color_1, color_2, float4(c, c, c, c));
}

technique Draw3
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImage3(v_in);
	}
}

technique Draw2
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImage2(v_in);
	}
}

technique Draw1
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImage1(v_in);
	}
}

technique Draw0
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageColorMap(v_in);
	}
}

technique Draw0Max
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageColorMapMax(v_in);
	}
}

technique Draw1Max
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageMax1(v_in);
	}
}

technique Draw2Max
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageMax2(v_in);
	}
}

technique Draw3Max
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageMax3(v_in);
	}
}
