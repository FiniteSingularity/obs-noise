////////////////// K.jpg's Smooth Re-oriented 8-Point BCC Noise //////////////////
//////////////////// Output: float4(dF/dx, dF/dy, dF/dz, value) ////////////////////

// Borrowed from Stefan Gustavson's noise code

float4 permute(float4 t)
{
	return t * (t * 34.0 + 133.0);
}

#ifndef OPENGL
float mod(float x, float y)
{
	return x - y * floor(x / y);
}

float2 mod(float2 x, float2 y)
{
	return x - y * floor(x / y);
}

float3 mod(float3 x, float3 y)
{
	return x - y * floor(x / y);
}

float4 mod4(float4 x, float4 y)
{
	return x - y * floor(x / y);
}
#endif

// Gradient set is a normalized expanded rhombic dodecahedron
float3 grad(float hash)
{
	// Random vertex of a cube, +/- 1 each
	float3 cube = mod(floor(hash / float3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;

	// Random edge of the three edges connected to that vertex
	// Also a cuboctahedral vertex
	// And corresponds to the face of its dual, the rhombic dodecahedron
	float3 cuboct = cube;

	int index = int(hash / 16.0);
	if (index == 0)
		cuboct.x = 0.0;
	else if (index == 1)
		cuboct.y = 0.0;
	else
		cuboct.z = 0.0;

	// In a funky way, pick one of the four points on the rhombic face
	float type = mod(floor(hash / 8.0), 2.0);
	float3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));

	// Expand it so that the new edges are the same length
	// as the existing ones
	float3 grad = cuboct * 1.22474487139 + rhomb;

	// To make all gradients the same length, we only need to shorten the
	// second type of vector. We also put in the whole noise scale constant.
	// The compiler should reduce it into the existing floats. I think.
	grad *= (1.0 - 0.042942436724648037 * type) * 3.5946317686139184;

	return grad;
}

// BCC lattice split up into 2 cube lattices
float4 openSimplex2SDerivativesPart(float3 X)
{
	float3 b = floor(X);
	float4 i4 = float4(X - b, 2.5);

	// Pick between each pair of oppposite corners in the cube.
	float3 v1 = b + floor(dot(i4, float4(.25, .25, .25, .25)));
	float3 v2 = b + float3(1, 0, 0) + float3(-1, 1, 1) * floor(dot(i4, float4(-.25, .25, .25, .35)));
	float3 v3 = b + float3(0, 1, 0) + float3(1, -1, 1) * floor(dot(i4, float4(.25, -.25, .25, .35)));
	float3 v4 = b + float3(0, 0, 1) + float3(1, 1, -1) * floor(dot(i4, float4(.25, .25, -.25, .35)));

	// Gradient hashes for the four vertices in this half-lattice.
	float4 hashes = float4(
		hash33(v1).x, hash33(v2).x, hash33(v3).x, hash33(v4).x
	) * 47.0;

	
	// Gradient extrapolations & kernel function
	float3 d1 = X - v1;
	float3 d2 = X - v2;
	float3 d3 = X - v3;
	float3 d4 = X - v4;
	float4 a = max(float4(0.75, 0.75, 0.75, 0.75) - float4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), float4(0.0, 0.0, 0.0, 0.0));
	float4 aa = a * a;
	float4 aaaa = aa * aa;
	float3 g1 = grad(hashes.x);
	float3 g2 = grad(hashes.y);
	float3 g3 = grad(hashes.z);
	float3 g4 = grad(hashes.w);
	float4 extrapolations = float4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));

#ifndef OPENGL
	float4x3 derivativeMatrix = { d1, d2, d3, d4 };
	float4x3 gradientMatrix = { g1, g2, g3, g4 };

	// Derivatives of the noise
	float3 derivative = -8.0 * mul(aa * a * extrapolations, derivativeMatrix)
		+ mul(aaaa, gradientMatrix);

#else
	vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations) + mat4x3(g1, g2, g3, g4) * aaaa;
#endif
	
	// Return it all as a float4
	return float4(derivative, dot(aaaa, extrapolations));
}

// Use this if you don't want Z to look different from X and Y
float4 openSimplex2SDerivatives_Conventional(float3 X)
{
	X = dot(X, float3(2.0 / 3.0, 2.0 / 3.0, 2.0 / 3.0)) - X;

	float4 result = openSimplex2SDerivativesPart(X) + openSimplex2SDerivativesPart(X + 144.5);

	return float4(dot(result.xyz, float3(2.0 / 3.0, 2.0 / 3.0, 2.0 / 3.0)) - result.xyz, result.w);
}

// Use this if you want to show X and Y in a plane, then use Z for time, vertical, etc.
float4 openSimplex2SDerivatives_ImproveXY(float3 X)
{
#ifndef OPENGL
	// Not a skew transform.
	float3x3 orthonormalMap =
	{
		0.788675134594813, -0.211324865405187, -0.577350269189626,
		-0.211324865405187, 0.788675134594813, -0.577350269189626,
		0.577350269189626, 0.577350269189626, 0.577350269189626
	};
	
	X = mul(X, orthonormalMap);
	float4 result = openSimplex2SDerivativesPart(X) + openSimplex2SDerivativesPart(X + 144.5);
	return float4(mul(orthonormalMap, result.xyz), result.w);
#else
	mat3 orthonormalMap = mat3(
		0.788675134594813, -0.211324865405187, -0.577350269189626,
		-0.211324865405187, 0.788675134594813, -0.577350269189626,
		0.577350269189626, 0.577350269189626, 0.577350269189626);
    
	X = orthonormalMap * X;
	float4 result = openSimplex2SDerivativesPart(X) + openSimplex2SDerivativesPart(X + 144.5);

	return vec4(result.xyz * orthonormalMap, result.w);
#endif
}

float open_simplex_1d(float2 uv, int i, float2 scale)
{
	float theta = float(i) * sub_rotation;
	uv = transform(uv, float2(0.5, 0.5), theta);
	float2 displacement = float(i) * sub_displace;
	float2 coord = uv * uv_size;
	coord += displacement;
	coord *= 1.0 / (2.0 * pixel_size * scale);
	float4 noise = openSimplex2SDerivatives_ImproveXY(float3(coord, time));
	return noise.w * 0.5 + 0.5;
}

float2 open_simplex_2d(float2 uv, int i, float2 scale)
{
	float theta = float(i) * sub_rotation;
	uv = transform(uv, float2(0.5, 0.5), theta);
	float2 displacement = float(i) * sub_displace;
	float2 coord = uv * uv_size;
	coord += displacement;
	coord *= 1.0 / (2.0 * pixel_size * scale);
	float4 noise = openSimplex2SDerivatives_ImproveXY(float3(coord, time));
	return noise.wx * 0.5 + 0.5;
}

float3 open_simplex_3d(float2 uv, int i, float2 scale)
{
	float theta = float(i) * sub_rotation;
	uv = transform(uv, float2(0.5, 0.5), theta);
	float2 displacement = float(i) * sub_displace;
	float2 coord = uv * uv_size;
	coord += displacement;
	coord *= 1.0 / (2.0 * pixel_size * scale);
	float4 noise = openSimplex2SDerivatives_ImproveXY(float3(coord, time));
	return noise.wxy * 0.5 + 0.5;
}
